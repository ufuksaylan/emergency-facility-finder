name: Deploy Rails App to Lightsail

on:
  push:
    branches:
      - main # Trigger deployment only on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-22.04
    # Only run this job if pushing to the main branch
    if: github.ref == 'refs/heads/main'

    env:
      # Define image tag using the Git SHA for uniqueness
      RAILS_IMAGE_TAG: rails-app-${{ github.sha }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup AWS CLI and lightsailctl
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          echo "Verifying AWS CLI install:"
          which aws
          aws --version
          echo "Installing lightsailctl:"
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl
          echo "lightsailctl installed."

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build Rails App Docker image
        run: |
          docker build \
            -t ${{ env.RAILS_IMAGE_TAG }} \
            -f ./Dockerfile .  # Assumes Dockerfile is at the root

      - name: Push Rails App image to Lightsail
        run: |
          aws lightsail push-container-image \
            --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} \
            --label ${{ env.RAILS_IMAGE_TAG }} \
            --image ${{ env.RAILS_IMAGE_TAG }}

      - name: Get Deployed Lightsail Image URI
        id: get_image_uri # Give this step an ID to reference its outputt
        run: |
          # Get the full image URI (:service-name.image-label.N) needed for deployment
          # Ensure jq is installed
          sudo apt-get update && sudo apt-get install -y jq

          echo "Attempting to find image with label: ${{ env.RAILS_IMAGE_TAG }}"
          echo "Running: aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }}"
          # Print raw output for debugging
          aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} > images_output.json
          echo "--- Raw get-container-images output: ---"
          cat images_output.json
          echo "--- End raw output ---"

          # Try to extract the specific image URI using jq
          # Use contains() to check the image string instead of a non-existent label field
          LIGHTSAIL_IMAGE_URI=$(jq -r '.containerImages[] | select(.image | contains("${{ env.RAILS_IMAGE_TAG }}")) | .image' images_output.json)

          echo "JQ extracted image URI: $LIGHTSAIL_IMAGE_URI"

          # Check if the URI is empty and fail if it is
          if [ -z "$LIGHTSAIL_IMAGE_URI" ]; then
            echo "ERROR: Failed to find image URI for label ${{ env.RAILS_IMAGE_TAG }}. Check push step and label matching."
            exit 1
          fi

          # Set the found URI as an output parameter for this step
          echo "Setting output image_uri=$LIGHTSAIL_IMAGE_URI"
          echo "image_uri=$LIGHTSAIL_IMAGE_URI" >> $GITHUB_OUTPUT



      - name: Create containers.json for Deployment
        env:
          # Make the image URI available as an environment variable in this step
          LIGHTSAIL_RAILS_IMAGE: ${{ steps.get_image_uri.outputs.image_uri }}
        run: |
          echo '{
            "rails-app": {
              "image": "${{ env.LIGHTSAIL_RAILS_IMAGE }}",
              "ports": {
                "3000": "HTTP"
              },
              "environment": {
                "RAILS_ENV": "production",
                "RAILS_LOG_TO_STDOUT": "true",
                "RAILS_SERVE_STATIC_FILES": "true",
                "PORT": "3000",
                "POSTGRES_HOST": "${{ secrets.LIGHTSAIL_NEON_DB_HOST }}",
                "POSTGRES_PORT": "${{ vars.LIGHTSAIL_NEON_DB_PORT }}",
                "POSTGRES_USERNAME": "${{ secrets.LIGHTSAIL_NEON_DB_USER }}",
                "EMERGENCY_FACILITY_FINDER_DATABASE_PASSWORD": "${{ secrets.LIGHTSAIL_NEON_DB_PASSWORD }}",
                "RAILS_MASTER_KEY": "${{ secrets.RAILS_MASTER_KEY }}",
                "HEALTHSITES_API_KEY": "${{ secrets.HEALTHSITES_API_KEY }}",
                "OSRM_HOST": "${{ secrets.OSRM_HOST }}"
              }
            }
          }' > containers.json
          echo "Created containers.json:"
          cat containers.json

      - name: Create public-endpoint.json for Deployment
        run: |
          echo '{
            "containerName": "rails-app",
            "containerPort": 3000,
            "healthCheck": {
              "path": "/up",
              "intervalSeconds": 15,
              "timeoutSeconds": 5,
              "healthyThreshold": 2,
              "unhealthyThreshold": 3,
              "successCodes": "200-399"
            }
          }' > public-endpoint.json
          echo "Created public-endpoint.json:"
          cat public-endpoint.json

      - name: Deploy to AWS Lightsail Container Service
        run: |
          aws lightsail create-container-service-deployment \
            --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} \
            --containers file://containers.json \
            --public-endpoint file://public-endpoint.json
          echo "Deployment initiated."